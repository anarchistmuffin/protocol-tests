/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ReplyableInterface extends utils.Interface {
  functions: {
    "_afterExecuteHook()": FunctionFragment;
    "_approveSenderBeforeReplying()": FunctionFragment;
    "_beforeExecuteHook()": FunctionFragment;
    "_canInteractWith(address)": FunctionFragment;
    "_canTransfer()": FunctionFragment;
    "_canWithdraw()": FunctionFragment;
    "_execute(bytes)": FunctionFragment;
    "_getAddressEndpoint(string)": FunctionFragment;
    "_implementFunctionID(bytes32)": FunctionFragment;
    "_prepareReply()": FunctionFragment;
    "_routeType()": FunctionFragment;
    "_sendReply(address,bytes32,bytes)": FunctionFragment;
    "_supportsRouteOpCode(bytes1)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_afterExecuteHook"
      | "_approveSenderBeforeReplying"
      | "_beforeExecuteHook"
      | "_canInteractWith"
      | "_canTransfer"
      | "_canWithdraw"
      | "_execute"
      | "_getAddressEndpoint"
      | "_implementFunctionID"
      | "_prepareReply"
      | "_routeType"
      | "_sendReply"
      | "_supportsRouteOpCode"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_afterExecuteHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_approveSenderBeforeReplying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_beforeExecuteHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_canInteractWith",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_canTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_canWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_execute",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_getAddressEndpoint",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_implementFunctionID",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_prepareReply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_routeType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_sendReply",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_supportsRouteOpCode",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_afterExecuteHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_approveSenderBeforeReplying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_beforeExecuteHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_canInteractWith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_canTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_canWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getAddressEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_implementFunctionID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_prepareReply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_routeType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_sendReply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_supportsRouteOpCode",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Replyable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReplyableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _afterExecuteHook(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _approveSenderBeforeReplying(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _beforeExecuteHook(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _canInteractWith(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _canTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _canWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _execute(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _getAddressEndpoint(
      _endpointName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _implementFunctionID(
      functionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _prepareReply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _routeType(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _sendReply(
      _to: PromiseOrValue<string>,
      reqId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _supportsRouteOpCode(
      opcode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _afterExecuteHook(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _approveSenderBeforeReplying(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _beforeExecuteHook(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _canInteractWith(
    arg0: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _canTransfer(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _canWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _execute(
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _getAddressEndpoint(
    _endpointName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _implementFunctionID(
    functionID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _prepareReply(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _routeType(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _sendReply(
    _to: PromiseOrValue<string>,
    reqId: PromiseOrValue<BytesLike>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _supportsRouteOpCode(
    opcode: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _afterExecuteHook(overrides?: CallOverrides): Promise<void>;

    _approveSenderBeforeReplying(overrides?: CallOverrides): Promise<void>;

    _beforeExecuteHook(overrides?: CallOverrides): Promise<void>;

    _canInteractWith(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _canTransfer(overrides?: CallOverrides): Promise<boolean>;

    _canWithdraw(overrides?: CallOverrides): Promise<boolean>;

    _execute(
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    _getAddressEndpoint(
      _endpointName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    _implementFunctionID(
      functionID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    _prepareReply(overrides?: CallOverrides): Promise<void>;

    _routeType(overrides?: CallOverrides): Promise<BigNumber>;

    _sendReply(
      _to: PromiseOrValue<string>,
      reqId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    _supportsRouteOpCode(
      opcode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    _afterExecuteHook(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _approveSenderBeforeReplying(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _beforeExecuteHook(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _canInteractWith(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _canTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _canWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _execute(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _getAddressEndpoint(
      _endpointName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _implementFunctionID(
      functionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _prepareReply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _routeType(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _sendReply(
      _to: PromiseOrValue<string>,
      reqId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _supportsRouteOpCode(
      opcode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _afterExecuteHook(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _approveSenderBeforeReplying(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _beforeExecuteHook(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _canInteractWith(
      arg0: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _canTransfer(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _canWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _execute(
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _getAddressEndpoint(
      _endpointName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _implementFunctionID(
      functionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _prepareReply(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _routeType(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _sendReply(
      _to: PromiseOrValue<string>,
      reqId: PromiseOrValue<BytesLike>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _supportsRouteOpCode(
      opcode: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
